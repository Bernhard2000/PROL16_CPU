; ### Assemblerprogram to add two 16 bit unsigned numbers ###


; ### Data ###
ORG 08000h					; define address to store initial data in it

; ### Constants ###
EQU startAddress, 08000h
EQU numbersAddr, 0A000h
DB 0A000h

;1*1
ORG 0A000h                  ;
DB 1,1                      ;


;2*5 == 10
ORG 0A008h                  ;
DB 2, 5                     ;

;10*10 == 100
ORG 0A010h                  ;
DB 10, 10                     ;

;1285*51 == 65535
ORG 0A018h                  ;
DB 1285, 51                   ;

;256*256 == 65536, first number to overflow to higher part
ORG 0A020h                  ;
DB 256, 256                   ;


;65535*65535, highest possible number
ORG 0A028h                  ;
DB 65535, 65535

ORG 0A030h
DB 12, 12

ORG 0A038h
DB 16383, 2

ORG 0A040h
DB 2048, 8

ORG 0A048h
DB 1, 0

ORG 0A050h
DB 8192, 8191

ORG 0A058h
DB 255, 255


ORG 0A060h
DB 16, 16


ORG 0A068h
DB 3, 16383


ORG 0A070h
DB 0, 32767


;2048*480 = 983040, all 0 in lower part
ORG 0A078h
DB 2048, 480

;0*0 ends loop
ORG 0A080h                  ;
DB 0, 0                     ;


ORG 0000h					; reset address for programm code




 :multiply:
LOADI R1, startAddress      ; R1 = Adress that stores address of first number
LOAD R1, R1                 ; load Address of next number
LOAD R0, R1                 ; load number1
LOADI R6, 0
INC R1
LOAD R1, R1                 ; load number2
LOADI R2, 0             ; resultlower = 0
LOADI R3, 0             ; resulthigher = 0
LOADI R7, 0             ; constant 0 for adding carry of result1 to result2
MOVE R4, R0             ; R4=R2
OR R4, R1               ; R2 OR R3
COMP R4, R7
LOADI R4, end           ; end program if 0*0 is detected
JUMPZ R4
LOADI R4, endloop
:shiftloop:
LOADI R5, addPart
SHR R1                  ; number2 >> 1
JUMPC R5                ; if number2[0] == 1 then result1 = result1 + number1
JUMPZ R4
SHL R0                  ; number1 << 1
SHLC R6
LOADI R5, shiftloop
JUMP R5
:addPart:
ADD R2, R0              ; result1 = result1 + number1
ADDC R3, R7
ADD R3, R6
SHL R0                  ; number1 << 1
SHLC R6
LOADI R5, shiftloop
JUMP R5
:endloop:
LOADI R1, startAddress				; load start address of data section of RAM  into R1
LOAD R0, R1
INC R0
INC R0                              ; R1 = address of result1
STORE R3, R0                        ; store resulthigher
INC R0
STORE R2, R0                        ; store resultlower
LOADI R2, 5                         ; increase address by 8 in total (5 + 3 INC)
ADD R0, R2
STORE R0, R1                        ; store next address in 08000h
LOADI R0, multiply
JUMP R0                             ;repeat loop
:end:
LOADI R3, numbersAddr				; dump memory snapshot in hex file
LOADI R4, 0FFFFh
STORE R3, R4
SLEEP						; end simulation with sleep command

